---
title: "Temp"
hiddenInHomeList: true
draft: true
---

## Hugo vs Theme

Hugo reads markdown and let you use them as resource, like {{ }}, inside HTML files.

Themes, like PapedMod, gives you pre build HTML files that uses Hugo syntax.

## PaperMod Theme

PaperMod is just a option of theme for Hugo.






# Post Content

### Front Matter

You only need the YAML front matter (--- and ---) in the pages you want Hugo to render as separate content.

```text
---
date: '2025-01-01'
title: 'Post Title'
tags: ['tag1', 'tag2']
draft: false
---
```

### Inserting md file into current md


### Linking between markdown files inside a single post

- Using relref: `{{</* relref "my-post-title" */>}}` to link to another post.
- Using relative link: `[The link text]``(./my-post-title)` to link to another post or go-back like `[`Back to Main]`(./)`.

### Images

We can insert images using markdown syntax: `[Image Description](image.png)`.
You can also add an image using `{ {<figure src="image.png" caption="Image Description" class="center" align=center>}}` syntax.
Use `align=center` to center image with captions.

Edit `themes/PaperMod/assets/css/common/post-single.css` to change the default image styling.
You can edit the selector `.post-content img[src*="#center"]` to change the style of images that have the `#center` flag in the src attribute. Or the selector `.post-content figure > figcaption` to change the style of the caption of the images.

### Fonts

You can add Google Fonts header in `public/index.html`.

# Templates

Hugo uses HTML files to define the template.

## List

The homepage list of post is defined in `themes/PaperMod/layouts/_default/list.html`.

# Extending

### Modifying Theme

To override PaperMod behavior without touching the theme:
Copy the file from themes/PaperMod/layouts/... to your project’s /layouts/....
Modify it there—Hugo will prioritize your version.

### Modifying CSS

If you need custom CSS like to adjust h1, h2 headings:

Create the folder/file:

```
/static/custom.css
```

Add a new entry into `hugo.yaml`

```yaml
params:
  custom_css: ["custom.css"]
```

Insert this template into `themes/PaperMod/layouts/partials/header.html`

```yaml
{{ range .Site.Params.custom_css -}}
    <link rel="stylesheet" href="{{ . | absURL }}">
{{- end }}
```

#### Tags

The HTML file template that include the tags at bottom of each page is located at `themes/PaperMod/layouts/_default/single.html`.

#### Post Title

You can adjust styling of the _title_ of the post by updating the selector `.post-title` in `themes/PaperMod/assets/css/common/post-single.css`.

### Modifying the HTML structure

You can add a new HTML element to the post template by updating `themes/PaperMod/layouts/_default/single.html`

Ideally you want to copy the file to `/layout` and then modify the file there to keep the original inside the PaperMod folder.

### Adding Canvas Support

We can use HTML5 Canvas to draw graphics.
But we first need to update Hugo settings to enable it.

### Adding Latex Support

We can use Latex in markdown files.

#### Matrices

Write the following in your markdown file:

```latex
\\(
\begin{bmatrix}
   a & b \\\\\\
   c & d
\end{bmatrix}
\\)
```

To render the matrix:

\\(
\begin{bmatrix}
a & b \\\\\\
c & d
\end{bmatrix}
\\)

You can also use symbols like `\Theta` to render symbols like the greek letter theta:

Latex syntax:

```latex
\\(
\Theta
\\)
```

Result:

\\(
\Theta
\\)

To strike through text, you can use `\xcancel{text}`:

```latex
\\(
\xcancel{ABC}
\\)
```

Result:

\\(
\xcancel{ABC}
\\)

# Under the Hood

Hugo is a static site generator written in Go.
You write your content in markdown files, define templates using themes, and do some configuration in a `hugo.yaml` file.
Then, Hugo will generate a static HTML site for you.

![Hugo](diagram.png#center)

## Markdown Rendering

Hugo uses `Goldmark` as the Markdown parser.
Files with ending with `.md`, `.mdown`, or `.markdown` are processed as Markdown.

Documentation: https://gohugo.io/configuration/markup/

## HTML Templates

Inside the .html files you will notice a template syntax.
Templates use variables, functions, and methods to transform the markdown content into a published page.

Hugo uses the Go [html/template](https://pkg.go.dev/html/template) and [text/template](https://pkg.go.dev/text/template) packages to handle the templates.

Documentation: https://gohugo.io/templates/introduction/

## Directory Structure

#### /hugo.toml

The main configuration file of Hugo.

#### /public/\*

Contains the generated site ready to be published.
Once Hugo finishes to build your website from markdown files, it will put the generated HTML files in this folder.

#### /content/\*

The content folder contains the markdown files that you write for each post.

#### /static/\*

In Hugo, the /static folder is used to store static assets—files that should be served as-is without any processing or templating.
Everything in /static is copied verbatim to the public folder during build.
If you have static/images/logo.png, it will be available at example.com/images/logo.png.

#### /themes/PaperMod

This is the directory where the PaperMod theme is installed in your Hugo project.

#### /layouts/\*

Here is where you can override PaperMod behavior without touching the theme files.
You just copy the file from `themes/PaperMod/layouts/...` to `/layouts/...`.
Then you modify the file in `/layouts/...` that Hugo will ignore the theme file.

A fresh Hugo project will have a empty Layout folder.
So Hugo will fallback to the Layout folder inside your theme at /themes/<themename>/layouts/

### Layout Folder

You have a layout folder inside the theme and you in your root folder.

##### /layouts/\_default/baseof.html

This is the root HTML file.
The start point of the published site.
Contains the base template where the other templates inherit from.

It imports `header.html` and `footer.html` partials.

##### /layouts/shortcodes/\*

In Hugo, layouts/shortcodes/ is a special directory where you define custom shortcodes (reusable content snippets written in Go template syntax). These are mini-templates that you can call from within your Markdown files.

##### /layouts/partials

Contains the HTML for partial content.
For example, you can add `math.html` to handle math equations using some Latex library like KaTeX.

##### /layouts/\_default

Contains the default layout for the site.

##### /layouts/\_default/\_markup



# Creating a theme

You need to create the layouts folder with single.html template.

Files in the root of the **content** directory have a content type of page.

```
content/
├── about.md
└── contact.md
```

To render these pages with a unique template, create a matching subdirectory:

```
layouts/
└── page/
    └── single.html
```

Hugo chooses the most specific template available based on context.
For example, for /blog/my-post/, Hugo will first look for layouts/blog/single.html, then fall back to layouts/\_default/single.html.

## Hugo 0.146

In Hugo v0.146.0, we performed a full re-implementation of how Go templates are handled in Hugo.

The \_default folder is removed.
Move all files in layouts/\_default up to the layouts/ root.

The layouts/partials folder is renamed to layouts/\_partials.

# Hugo Markdown Files

TLDR:
index.* => no children pages;
_index.* => yes children pages

### Headless bundles

### Section

### Page Bundles

A directory with an index.md file is a leaf bundle.
A directory with an \_index.md file is a branch bundle.

A page bundle is a directory that encapsulates both content and associated resources.

```
content
  about.md
  another-section
    foo.md
  posts
      post-a
          index.html
          figure-resource-1.png
          figure-resource-2.png
          page-resource-1.md
          page-resource-2.md
      post-b
        index.md
```

The page-a folder is a "page bundle" of type "leaf bundle" because the folder has the "index.html" file.
The page bundle also have 2 resource of type "image" and 2 resource of type "page".
Hugo will not render page-resource-1.md and page-resource-2.md as individual pages.

The post-b is another page bundle of type leaf bundle that has not resource inside.

The about.md is a section.
As well as "another-section".

##### Page Resource

Resources within a page bundle are page resources, accessible with the Resources method on the Page object.
Page resources are only accessible from page bundles, those directories with index.md or \_index.md files at their root.

##### Leaf Bundle

A leaf bundle is a **directory** that contains an `index.md` file.
And zero or more resources.
And it has no descendants.
Analogous to a physical leaf, a leaf bundle is at the end of a branch bundle.

A leaf bundle is a directory that contains an index.md file and zero or more resources.

Template type: single
Descendant pages: None
Resource types: page, image, video, etc.

Files with `resource type page` include content written in Markdown, HTML, AsciiDoc, Pandoc, reStructuredText, and Emacs Org Mode.
In a leaf bundle, excluding the index file, these files are only accessible as `page resources`.
In a branch bundle, these files are only accessible as `content pages`.

##### Branch Bundle

A branch bundle is a "top-level" **content directory** or any **content directory** containing an \_index.md file.
A branch bundle is a directory that contains an \_index.md file and zero or more resources.
Analogous to a physical branch, a branch bundle may have descendants including leaf bundles and other branch bundles.
A branch bundle may also contain page resources such as images.
Top-level directories with or without \_index.md files are also branch bundles.
This includes the home page.

Template type: home, section, taxonomy, or term.
Descendant pages: Zero or more
Resource types: all but page