<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Language on The Mize Collection</title>
    <link>https://mizerc.github.io/tags/language/</link>
    <description>Recent content in Language on The Mize Collection</description>
    <generator>Hugo -- 0.147.4</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mizerc.github.io/tags/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Next.js</title>
      <link>https://mizerc.github.io/posts/technology/nextjs/</link>
      <pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://mizerc.github.io/posts/technology/nextjs/</guid>
      <description>&lt;h1 id=&#34;routing&#34;&gt;Routing&lt;/h1&gt;
&lt;h2 id=&#34;app-router&#34;&gt;App Router&lt;/h2&gt;
&lt;p&gt;In Next.js 13+, app route (/app) is part of the App Router, which uses the new file-based routing system with React Server Components.
It supports layouts, templates, nested routing, loading/error states, and server/client components separation.
This approach is more flexible and modern, designed for large-scale and dynamic apps.&lt;/p&gt;
&lt;p&gt;The App Router is a file-system based router that uses React&amp;rsquo;s latest features such as Server Components, Suspense, and Server Functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C Language</title>
      <link>https://mizerc.github.io/posts/technology/language-c/</link>
      <pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mizerc.github.io/posts/technology/language-c/</guid>
      <description>&lt;p&gt;Random notes about the C language.&lt;/p&gt;
&lt;h1 id=&#34;entry-point&#34;&gt;Entry Point&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; function is the entry point of the program. It is the first function that is called when the program starts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;compilation-and-linking&#34;&gt;Compilation and Linking&lt;/h1&gt;
&lt;p&gt;The C compiler (cc) compiles each source code into object files.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cc -c file1.c file2.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;-c&lt;/code&gt; option tells the compiler to compile only and not to link.&lt;/p&gt;
&lt;p&gt;The object files are then linked together to form an executable.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
